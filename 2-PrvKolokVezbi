Создадете класа „List“:
Оваа класа ќе складира информации за:
- Броеви што се дел од списокот (фиксна низа од цели броеви)
- Број на броеви кои се дел од списокот (цел број).

Дефинирајте ги следните методи за класата `List`:
1. Конструктор со аргументи: Ја иницијализира листата користејќи низа од цели броеви и нејзината големина.
2. Стандарден конструктор: Иницијализира празна листа.
3. Метод на `void pecati()`:
- Ги печати информациите за списокот во формат: [број на елементи во листата]: x1 x2 .. xn sum: [сума] average: [просек]
4. `int sum()` Метод:
- Го враќа збирот на сите броеви во списокот.
5. Метод на `двоен просек()`:
- Го враќа просекот на броевите во списокот.

Креирајте класа `ListContainer`:
Оваа класа ќе складира информации за:
1. Низа од објекти „Список“ (фиксна низа до 100 lists)
2. Број на елементи во низата List (цел број)
3. Број на обиди за додавање листа во контејнерот (цел број иницијализиран на нула)

Дефинирајте ги следните методи за класата `ListContainer`:
1. Стандарден конструктор
2. Метод на `void pecati()`:
- Печати информации за контејнерот во формат:  List number: [реден број на листата] 
List info: [испечатени информации за листата со методот List::pecati()] \n sum: [сума] average: [просек]
- Ја вклучува вкупната сума и просекот на сите списоци во контејнерот.
- Ако контејнерот е празен, се печати: The list is empty
3. Метод на `void addNewList(List l)`:
- Додава список во контејнерот **само ако неговата сума е единствена** (не еднаква на збирот на која било постоечка листа во контејнерот).
- Го зголемува бројачот на `addAttempts` без разлика дали списокот е додаден.
4. `int sum()` Метод:
- Го враќа збирот на сите броеви во сите списоци во контејнерот.
5. Метод на `double average()`:
- Го враќа просекот на сите броеви во сите списоци во контејнерот.


int main() {
    int test;
    cin >> test;

    if (test == 1) {
        double price;
        cout << "=====TEST NA KLASATA StockRecord=====" << endl;
        StockRecord sr("1", "Microsoft", 60.0, 100);
        cout << "Konstruktor OK" << endl;
        cin >> price;
        sr.setNewPrice(price);
        cout << "SET metoda OK" << endl;
    } else if (test == 2) {
        cout << "=====TEST NA METODITE I OPERATOR << OD KLASATA StockRecord=====" << endl;
        char id[12], company[50];
        double price, newPrice;
        int n, shares;
        cin >> n;
        for (int i = 0; i < n; ++i) {
            cin >> id >> company >> price >> newPrice >> shares;
            StockRecord sr(id, company, price, shares);
            sr.setNewPrice(newPrice);
            cout << sr.value() << endl;
            sr.print();
        }
    } else if (test == 3) {
        cout << "=====TEST NA KLASATA Client=====" << endl;
        char companyID[12], companyName[50], clientName[50];
        int clientID, n, shares;
        double oldPrice, newPrice;
        cin >> clientName >> clientID >> n;
        Client c(clientName, clientID);
        cout << "Konstruktor OK" << endl;
        for (int i = 0; i < n; ++i) {
            cin >> companyID >> companyName >> oldPrice >> newPrice >> shares;
            StockRecord sr(companyID, companyName, oldPrice, shares);
            sr.setNewPrice(newPrice);
            c.addStock(sr);
        }
        c.printPortfolio();
    }

    return 0;
}
