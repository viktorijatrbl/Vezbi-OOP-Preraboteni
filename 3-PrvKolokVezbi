Имате задача да креирате модул за управување со портфолија на клиенти во приватен банкарски систем кој тргува со акции.
> Барања за класата StockRecord
Класата StockRecord треба да складира информации за:
- ID на акции: Единствен идентификатор за акциите (фиксна низа од 12 знаци)
- Име на компанија: Името на компанијата што ги издава акциите (низа од 50 знаци)
- Набавна цена: Цената по која е купена акцијата (реален број).
- Тековна цена: Тековната цена на акцијата (реален број).
- Број на акции: Број на купени акции (цел број).

Методи за спроведување:

- Конструктор
- Деструктор
- setNewPrice (double price): Ја ажурира моменталната цена на акциите.
- double value(): Ја пресметува моменталната вредност на акциите -> број на акции * моментална цена.
- double profit(): Ја пресметува добивката од акциитe -> број на акции * (тековна цена - куповна цена).
- print(): Ги прикажува деталите за акциите во формат: Име на компанија Број на акции Набавна цена Тековна цена Добивка
Дополнително, вклучете статичен член за следење на вкупниот број на објекти на StockRecord и статичен метод за враќање на овој број.

- Барања за класа на клиенти
> Класата Клиент треба да складира информации за:
- Име на клиентот: име и презиме на клиентот (низа од 50 знаци)
- ID на сметка (цел број)
- Портфолио на акции: низа од објекти StockRecord (фиксна големина, до 10 акции).
- Број на акции: Го следи бројот на акции во портфолиото.

Методи за спроведување:
- Конструктор
- Destructor
- addStock(const StockRecord& stock): Додава нова акција во портфолиото доколку дозволува просторот (до 10 акции). 
- totalValue(): Ја пресметува вкупната вредност на сите акции во портфолиото -> Збир на вредноста() на сите објекти на StockRecord.
- printPortfolio(): Го прикажува портфолиото на клиентот во формат:
  - Вкупна вредност на портфолио на ИД на сметката << endl;
  - Име на компанија Број на акции Набавна цена Тековна цена Добивка

Дополнително, користете статичен член за вкупниот број на објекти на клиентот и статичен метод за враќање на овој број.


int main() {
    int test;
    cin >> test;

    if (test == 1) {
        double price;
        cout << "=====TEST NA KLASATA StockRecord=====" << endl;
        StockRecord sr("1", "Microsoft", 60.0, 100);
        cout << "Konstruktor OK" << endl;
        cin >> price;
        sr.setNewPrice(price);
        cout << "SET metoda OK" << endl;
    } else if (test == 2) {
        cout << "=====TEST NA METODITE I OPERATOR << OD KLASATA StockRecord=====" << endl;
        char id[12], company[50];
        double price, newPrice;
        int n, shares;
        cin >> n;
        for (int i = 0; i < n; ++i) {
            cin >> id >> company >> price >> newPrice >> shares;
            StockRecord sr(id, company, price, shares);
            sr.setNewPrice(newPrice);
            cout << sr.value() << endl;
            sr.print();
        }
    } else if (test == 3) {
        cout << "=====TEST NA KLASATA Client=====" << endl;
        char companyID[12], companyName[50], clientName[50];
        int clientID, n, shares;
        double oldPrice, newPrice;
        cin >> clientName >> clientID >> n;
        Client c(clientName, clientID);
        cout << "Konstruktor OK" << endl;
        for (int i = 0; i < n; ++i) {
            cin >> companyID >> companyName >> oldPrice >> newPrice >> shares;
            StockRecord sr(companyID, companyName, oldPrice, shares);
            sr.setNewPrice(newPrice);
            c.addStock(sr);
        }
        c.printPortfolio();
    }

    return 0;
}
